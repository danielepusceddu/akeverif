theory P2a
begin

functions: tag/2

/*
a b x
b a y
a b tag(k',y)
b a tag(k,x)

In the last step, b sends tag(k,x) but will never actually know if it is accepted
So, claiming commit is premature. This breaks injagr for the responder

injagr for initiator is broken when communicating with another agent acting as initiator
you send x, you receive y, you output tag of y, you receive tag of x
because the initiator sends the tag before receiving confirmation
*/

rule Keygen:
    [Fr(~k)]
    --[Gen($A, $B, ~k)]->
    [!Ltk($A, $B, ~k)]
    
rule Rev:
    [!Ltk(A, B, k)]
    --[Reveal(A)]->
    [Out(k)]

rule Init_I:
    [Fr(~id), !Ltk(A, B, kab), !Ltk(B, A, kba)]
    --[Create_I(A, ~id)]->
    [St_I_1(A, ~id, B, kab, kba)]

rule Init_R:
    [Fr(~id), !Ltk(A, B, kab), !Ltk(B, A, kba)]
    --[Create_R(B, ~id)]->
    [St_R_1(B, ~id, A, kba, kab)]

rule I_send1:
    [Fr(~x), St_I_1(A, id, B, kab, kba)]
    -->
    [St_I_2(A, id, B, kab, kba, ~x), Out(~x)]

rule R_recv1:
    [In(x), St_R_1(B, id, A, kba, kab)]
    -->
    [St_R_2(B, id, A, kba, kab, x)]

rule R_send2:
    [Fr(~y), St_R_2(B, id, A, kba, kab, x)]
    --[Running(B, A, <'I', 'R', <x, ~y>>)]->
    [St_R_3(B, id, A, kba, kab, x, ~y), Out(~y)]

rule I_recv2:
    [In(y), St_I_2(A, id, B, kab, kba, x)]
    --[Running(A, B, <'R', 'I', <x, y>>)]->
    [St_I_3(A, id, B, kab, kba, x, y)]

rule I_send3:
    [St_I_3(A, id, B, kab, kba, x, y)]
    -->
    [St_I_4(A, id, B, kab, kba, x, y), Out(tag(y, kab))]

rule R_recv3:
    [In(t), St_R_3(B, id, A, kba, kab, x, y)]
    --[Eq(t, tag(y, kab))]->
    [St_R_4(B, id, A, kba, kab, x, y)]

rule R_send4:
    [St_R_4(B, id, A, kba, kab, x, y)]
    --[Commit(B, A, <'R', 'I', <x,y>>)]->
    [St_R_5(B, id, A, kba, kab, x, y), Out(tag(x, kba))]

rule I_recv4:
    [In(t), St_I_4(A, id, B, kab, kba, x, y)]
    --[Commit(A, B, <'I', 'R', <x,y>>), Finish(), Eq(t, tag(x, kba))]->
    [St_I_5(A, id, B, kab, kba, x, y)]



restriction Equality:
    "All m1 m2 #i. Eq(m1, m2)@i ==> m1=m2"

restriction Unidirectional:
    "All A B #i #j k1 k2.
    Gen(A, B, k1)@i & Gen(B, A, k2)@j ==> not(k1=k2)"

// make the attack nicer
restriction onekeyperdirection:
    "All A B #i #j k1 k2.
    Gen(A, B, k1)@i & Gen(A, B, k2)@j ==> #i = #j"


// Verified
lemma Executability:
    exists-trace
    "Ex #i. Finish()@i &  not (Ex A #j. Reveal(A)@j) & (All A B id1 id2 #i #j. (Create_I(A, id1)@i & Create_I(B, id2)@j) ==> id1 = id2)"

// Falsified
lemma noninjectiveagreementINITIATOR:
    "All a b t #i.
        Commit(a,b,<'I','R',t>)@i &
        not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
        ==> (Ex #j. Running(b,a,<'I','R',t>)@j)"

// Falsified
lemma noninjectiveagreementRESPONDER:
    "All a b t #i.
    Commit(a,b,<'R', 'I',t>)@i &
    not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
    ==> (Ex #j. Running(b,a,<'R', 'I',t>)@j)"

end