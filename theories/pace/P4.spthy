theory P4
begin

builtins: symmetric-encryption

functions: kdf/3, tag/2, h/1

/*
a to b: x,{|s|}h(k(a,b))
b to a: y
a to b: mac{<'I', 'hi'>}kdf(s, x, y)
b to a: mac{<'R', 'hi'>}kdf(s, x, y)
*/

rule Keygen:
    [Fr(~k)]
    --[Gen($A, $B, ~k)]->
    [!Ltk($A, $B, ~k)]
    
rule Rev:
    [!Ltk(A, B, k)]
    --[Reveal(A)]->
    [Out(k)]

rule Init_I:
    [Fr(~id), !Ltk(A, B, kab)]
    --[Create_I(A, ~id)]->
    [St_I_1(A, ~id, B, kab)]

rule Init_R:
    [Fr(~id), !Ltk(A, B, kab)]
    --[Create_R(B, ~id)]->
    [St_R_1(B, ~id, A, kab)]

rule I_send1:
    [Fr(~x), Fr(~s), St_I_1(A, id, B, kab)]
    -->
    [St_I_2(A, id, B, kab, ~x, ~s), Out(<~x, senc(~s, h(kab))>)]

rule R_recv1:
    let s = sdec(c, h(kab)) in
    [In(<x,c>), St_R_1(B, id, A, kab)]
    -->
    [St_R_2(B, id, A, kab, x, s)]

rule R_send2:
    let k = kdf(s, x, ~y) in
    [Fr(~y), St_R_2(B, id, A, kab, x, s)]
    --[Running(B, A, <'I', 'R', <x, ~y, k>>)]->
    [St_R_3(B, id, A, kab, x, s, ~y, k), Out(~y)]

rule I_recv2:
    let k = kdf(s, x, y) in
    [In(y), St_I_2(A, id, B, kab, x, s)]
    --[Running(A, B, <'R', 'I', <x, y, k>>)]->
    [St_I_3(A, id, B, kab, x, s, y, k)]

rule I_send3:
    [St_I_3(A, id, B, kab, x, s, y, k)]
    -->
    [St_I_4(A, id, B, kab, x, s, y, k), Out(tag(<'I', 'hello'>, k))]

rule R_recv3:
    [In(t), St_R_3(B, id, A, kab, x, s, y, k)]
    --[Eq(t, tag(<'I', 'hello'>, k))]->
    [St_R_4(B, id, A, kab, x, s, y, k)]

rule R_send4:
    [St_R_4(B, id, A, kab, x, s, y, k)]
    --[Commit(B, A, <'R', 'I', <x, y, k>>), Secret(B, A, k)]->
    [St_R_5(B, id, A, kab, x, s, y, k), Out(tag(<'R', 'hello'>, k))]

rule I_recv4:
    [In(t), St_I_4(A, id, B, kab, x, s, y, k)]
    --[Commit(A, B, <'I', 'R', <x, y, k>>), Secret(A, B, k), Finish(), Eq(t, tag(<'R', 'hello'>, k))]->
    [St_I_5(A, id, B, kab, x, s, y, k)]


restriction Equality:
    "All m1 m2 #i. Eq(m1, m2)@i ==> m1=m2"


// Verified
lemma injectiveagreementINITIATOR:
    "All a b t #i.
        Commit(a,b,<'I','R',t>)@i &
        not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
        ==> (Ex #j. Running(b,a,<'I','R',t>)@j
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>)@i2
        & not (#i2 = #i)))"

// Verified
lemma Executability:
    exists-trace
    "Ex #i. 
    Finish() @i &  not (Ex A #j. Reveal(A)@j)
    "
// Verified
lemma injectiveagreementRESPONDER:
    "All a b t #i.
    Commit(a,b,<'R', 'I',t>)@i &
    not ((Ex #r. Reveal(a)@r) | (Ex #r. Reveal(b)@r))
    ==> (Ex #j. Running(b,a,<'R', 'I',t>)@j
    & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>)@i2
    & not (#i2 = #i)))"

// Verified
lemma secrecy:
    "All A B x #i.
    Secret(A,B,x)@i &
    not ((Ex #r. Reveal(A)@r) | (Ex #r. Reveal(B)@r))
    ==> not (Ex #j. K(x)@j)"

end