theory P2b begin

// Function signature and definition of the equational theory E

functions: fst/1, pair/2, snd/1, tag/2
equations: fst(<x.1, x.2>) = x.1, snd(<x.1, x.2>) = x.2





rule (modulo E) Keygen:
   [ Fr( ~k ) ] --[ Gen( $A, $B, ~k ) ]-> [ !Ltk( $A, $B, ~k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevA:
   [ !Ltk( A, B, k ) ] --[ Reveal( A ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) RevB:
   [ !Ltk( A, B, k ) ] --[ Reveal( B ) ]-> [ Out( k ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !Ltk( A, B, kab ), !Ltk( B, A, kba ) ]
  --[ Create_I( A, ~id ), NotEq( kab, kba ) ]->
   [ St_I_1( A, ~id, B, kab, kba ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !Ltk( A, B, kab ), !Ltk( B, A, kba ) ]
  --[ Create_R( B, ~id ), NotEq( kab, kba ) ]->
   [ St_R_1( B, ~id, A, kba, kab ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_send1:
   [ Fr( ~x ), St_I_1( A, id, B, kab, kba ) ]
  -->
   [ St_I_2( A, id, B, kab, kba, ~x ), Out( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_recv1:
   [ In( x ), St_R_1( B, id, A, kba, kab ) ]
  -->
   [ St_R_2( B, id, A, kba, kab, x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_send2:
   [ Fr( ~y ), St_R_2( B, id, A, kba, kab, x ) ]
  --[ Running( B, A, <'I', 'R', x, ~y> ) ]->
   [ St_R_3( B, id, A, kba, kab, x, ~y ), Out( ~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_recv2:
   [ In( y ), St_I_2( A, id, B, kab, kba, x ) ]
  --[ Running( A, B, <'R', 'I', x, y> ) ]->
   [ St_I_3( A, id, B, kab, kba, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_send3:
   [ St_I_3( A, id, B, kab, kba, x, y ) ]
  -->
   [ St_I_4( A, id, B, kab, kba, x, y ), Out( tag(<x, y>, kab) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_recv3:
   [ In( t ), St_R_3( B, id, A, kba, kab, x, y ) ]
  --[ Eq( t, tag(<x, y>, kab) ) ]->
   [ St_R_4( B, id, A, kba, kab, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_send4:
   [ St_R_4( B, id, A, kba, kab, x, y ) ]
  --[ Commit( B, A, <'R', 'I', x, y> ) ]->
   [ St_R_5( B, id, A, kba, kab, x, y ), Out( tag(<x, y>, kba) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_recv4:
   [ In( t ), St_I_4( A, id, B, kab, kba, x, y ) ]
  --[
  Commit( A, B, <'I', 'R', x, y> ), Finish( ),
  Eq( t, tag(<x, y>, kba) )
  ]->
   [ St_I_5( A, id, B, kab, kba, x, y ) ]

  /* has exactly the trivial AC variant */

restriction Equality:
  "∀ m1 m2 #i. (Eq( m1, m2 ) @ #i) ⇒ (m1 = m2)"
  // safety formula

restriction Unidirectional:
  "∀ A B #i #j k1 k2.
    ((Gen( A, B, k1 ) @ #i) ∧ (Gen( B, A, k2 ) @ #j)) ⇒ (¬(k1 = k2))"
  // safety formula

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    ((Commit( a, b, <'I', 'R', t> ) @ #i) ∧
     (¬((∃ #r. Reveal( a ) @ #r) ∨ (∃ #r. Reveal( b ) @ #r)))) ⇒
    (∃ #j.
      (Running( b, a, <'I', 'R', t> ) @ #j) ∧
      (¬(∃ a2 b2 #i2.
          (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #r. (Reveal( a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( b ) @ #r) ⇒ ⊥) ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i))"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_recv4
  solve( St_I_4( a, id, b, kab, kba, x, y ) ▶₁ #i )
    case I_send3
    solve( !KU( tag(<~x, y>, ~k) ) @ #vk )
      case I_send3
      by contradiction /* from formulas */
    next
      case R_send4
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_recv4
          solve( St_I_4( a2, id.1, b2, kab, kba, ~x, ~y ) ▶₁ #i2 )
            case I_send3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_recv4
          solve( St_I_4( a2, id.1, b2, kab, kba, ~x, ~y ) ▶₁ #i2 )
            case I_send3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_tag
      solve( !KU( ~k ) @ #vk.3 )
        case RevA
        by contradiction /* from formulas */
      next
        case RevB
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma Executability:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_I_4( A, id, B, kab, kba, x, y ) ▶₁ #i )
  case I_send3
  solve( !KU( tag(<~x, y>, ~k) ) @ #vk )
    case R_send4
    solve( !KU( tag(<~x, ~y>, ~k.2) ) @ #vk.2 )
      case I_send3
      solve( !KU( ~x ) @ #vk.3 )
        case I_send1
        solve( !KU( ~y ) @ #vk.3 )
          case R_send2
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    ((Commit( a, b, <'R', 'I', t> ) @ #i) ∧
     (¬((∃ #r. Reveal( a ) @ #r) ∨ (∃ #r. Reveal( b ) @ #r)))) ⇒
    (∃ #j.
      (Running( b, a, <'R', 'I', t> ) @ #j) ∧
      (¬(∃ a2 b2 #i2.
          (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #r. (Reveal( a ) @ #r) ⇒ ⊥) ∧
  (∀ #r. (Reveal( b ) @ #r) ⇒ ⊥) ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i))"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_send4
  solve( St_R_4( a, id, b, kba, kab, x, y ) ▶₀ #i )
    case R_recv3
    solve( !KU( tag(<x, ~y>, ~k.1) ) @ #vk )
      case I_send3
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_send4
          solve( St_R_4( a2, id.1, b2, kba, kab, ~x, ~y ) ▶₀ #i2 )
            case R_recv3
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_send4
          solve( St_R_4( a2, id.1, b2, kba, kab, ~x, ~y ) ▶₀ #i2 )
            case R_recv3
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case R_send4
      by contradiction /* cyclic */
    next
      case c_tag
      solve( !KU( ~k.1 ) @ #vk.3 )
        case RevA
        by contradiction /* from formulas */
      next
        case RevB
        by contradiction /* from formulas */
      qed
    qed
  qed
qed









/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.8.0
Maude version 2.7.1
Git revision: UNKNOWN, branch: UNKNOWN
Compiled at: 2023-08-30 13:15:41.590881948 UTC
*/

end